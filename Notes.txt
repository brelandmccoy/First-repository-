Topics

PYTHON 
simple syntax, relatively easy to learn
useful in many areas(science, web development, GUI programming)
big standard library, many additional packages
    a = 3
    b = 4
    print(a + b)
    if a + b > 10:
    print ('greater')

Installation on windows
        installation windows
        pip install requests should successfully download and install a small Python package named requests
        interactive python console
        IDLE: simple development environment 
        PIP: package manager for installing extensions
Interactive Python console  
    options for running Python code:
    write a program as a file / collection of files, run that program (e.g. GUI applications, beb applications, data processing pipelines)
    type code into an interactive console or notebook line by (e.g. for quick calculations, experimenting, data exploration / analysis)
Local Python console
    launching the python console / shell:
    command python in the command prompt 
    from the start menu ( e.g. Python 3.9)

Variables
    birth_year = 1970
    current_year = 2020
    age = current_year - birth_year
    Names of variables are usually written in lower case, separating words by underscores
    Variable names may only consist of letters, digits and underscores
Variables
    Overwriting (reassigning) variables:
    name = "John"
    name = "Jane"
    a = 3
    a = a = 1
Basic (Primitive) Data types
    int (integer)
    float (floating point number)
    str (string): text  
    bool (boolean) yes / notebook none: missing /unknown value
str
    A string represents text
    Strings can be enclosed in single or double quotes
    greeting = "Hello"
    name = 'John'
building Strings
    name = "John"
    Inserting a variable (f-strings):
    message1 = f"Hello, {name}!"
    Joining strings:
    message2 = "Hello, " + name + "!"
Strings - Escape sequences
    Problem: how do we include quotation
    solution:
    text = "he said: \"hi!\""
    Python treats the sequence \" like a single "
Strings - escape sequences 
    line break: \n
    a = 'line 1\nline 2'
    single backslash: \\
    b = 'c:\\docs'
    print(Twinkle, twinkle, Little star\n \t)
Bool
    boolean
    In Python: True or False
    Note the capitalization
none
    None represents a value that is unkown or missing 
    first_name = "John"
    middle_name = None
    last_name = "Doe"
Types and conversions
    TYPES
    Determining the type of a variable via type:
    a = 4 / 2
    type (a)
Type conversions
    Objects may be converted to other types via int(), float(), str(), bool(), ...
    pi = 3.1415
    pi_int = int(pi)
    message =  "pi is approximately " + str(pi_int)
Functions
    a function is a " sub-program" that cna perform a specific task
    examples of predefined Functions
    len() can determine the lengths of a string (or of a list, ...)
    id() can determine the internal ID of an object
    type() can tell us the type of an object
    print() cna write some output into the terminal
    ...
    A function can receive so-called parameters and produce a result ( a return value)
    example: len() can take a string as a parameter and produce an int as the return value 
    example: print() can take a various objects as a parameters: it does not have explicit return value
Methods
    a method is a function that belongs to a specific object type ( e.g to str)
    examples of string Methods:
    first_name, upper()
    first_name.count("a")
    first_name, replace ("a", "@")
composite Types: Dict, List, Tuple
    Dict (dictionaries) are mappings that contain "named" entries with associated values
    person = {"first_name": "John", "last_name": "Doe", "nationality": "Canada", "birth_year": 1980
    }
Retrieving and settling elements:
    person ["first_name"]
    person["first_name"] = "Jane"
List a list represents a sequence of objects
primes = [2, 3, 5, 7, 11]
users = ["alice", "bob", "charlie"]
products = [
    {"name": "Iphone 12", "price": 949},
    {"name": "Fairphone", "price": 419},
    {"name": "pixel 5, "price": 799}
]
List
    Retrieving list elements via their index (starting at 0)
    users =  ["Alice", "Bob", "Charlie"]
    users [0]
    users[1]
    users[-1] # last element
List Overwriting a list users 0[ = "andrew"]
 users, appened(bro users. appear.)
    Rmoving the last elementusers. pop()
    removing by indiex asing. pop(0)
    Len(users)
len[users[0]tubples
    Tuple date = (1963, 10, 25)
    are of application similar dictionariesbehavior, similar to listskvyy
tubples 
    area applicitons up to dact:
        point_dict - = ("x", 2, :y:"reassigned)
        point_dict ("x": 2.)
Opbject references and mutations
    what will be the value after this different
    a =  {1, 2, 3}
    b =apprenindin (4)

Objective References and mutations  
    If the oricinal should remain insticnt it may be copied or derived version can be newly created on in:
    a = {1, 2, 3,_}
    Objective referncesa and mutations  
        Object referncs and mutated (change) irectly - e.g. via, approned
        Examples: list, dictionariesmaonay simple objects are immutable after they have been created. However, they can be replaced by other objects.
Error Messages and Tracebacks
    example code that creates an error message:
    open ("foo.txt")
    error message and traceback (most recent call last):
    File "xyz.py", line 1, in <module>
example code with a chain of function calls:
    import shutil
    def demo_remove_dir_error():
    shutil.rmtree("/does_not_exist")
    demo_remove_dir_error()
Text output
    general way to create text output from anywhere: print ()
    print("Hello, world!")
Input and output of text
    input via input():
    print("what is your name?") 
    name = input input()
    print("nice to meet you, " + name)